Здесь хранится всё, что связанно с базами данных
JSON данные получаем с сайта themoviedb.org. Хороший сайт с API на английском языке
Пример API-запроса - https://api.themoviedb.org/3/movie/550?api_key=a14a376a2704b9c91446a56f236f5b50
Ключ API (v3 auth) - a14a376a2704b9c91446a56f236f5b50 - наш ключ
Api documentation - developers.themoviedb.org
Base url - https://api.themoviedb.org/3/discover/movie

Как работает программа
0. Объект Movie хранит в себе данные об отдельно взятом фильме.
1. В NetworkUtils формируется URL по которому мы скачиваем код страницы, затем превращаем это в объект JSON
2. При помощи JSONUtils, из полученного JSON объекта мы вытаскиваем любые данные, посредством превращения данных в строку
3. MovieAdapter привязывает данные полученные из БД к нашему приложению
   Вот так:
   1.1. onCreateViewHolder сохраняет ссылку на RecyclerView в переменную view с типом View (все потому, что у RecyclerView тип View).
   1.2. Внутри onCreateViewHolder в методе viewGroup.getContext() мы получаем ссылку на layout нашего XML док-та, например на ConstraintLayout
   2. MovieViewHolder берет view и через него получает ссылки на элементы RecyclerView
   3. в конструкторе присваиваем локальному массиву данные, полученные из вне
   4. onBindViewHolder создает внутри себя объект MovieViewHolder и привязывает полученные из вне данные к элементам RecyclerView
   5. Таким образом мы загружаем и сохраняем данные лишь единажды, как только в массиве будут изменятся данные, мы будем автоматически их обновлять
   6. Adapter это в свою очередь расширение для RecyclerView, которое помогает сделать всё это вызовом одной функции
4. MovieDao интерфейс для работы с БД (заменяет огромный класс для работы с БД)
   1. загружаем зависимости из гугла. android architecture components dependencies -> переходим по ссылке
   2. переходим по ссылке  -> Lifecycle components (including ViewModel) -> копируем зависимости и вставляем в build.gradle(Module)
   3. переходим по ссылке  -> Room -> копируем зависимости и вставляем в build.gradle(Module)
5. MovieDatabase - класс для безопасного создания файла базы данных, и доступа к интерфейсу MovieDao
6. MainViewModel - класс с собственным жизненным циклом, реализующий работу с БД в другом потоке. Использует методы интерфейса MovieDao и создает БД при помощи MovieDatabase
7. LiveData - объект, который хранит коллекцию фильмов и может следить за изменением коллекции, все действия с этим объектом выполняются во второстепенном потоке
8. Loaders и Callback - это загрузчик данных и слушатель событий
9. В уроке 11 добавляем подргузку данных, страница за страницей
10. макет movie_info, является шаблоном для других макетов (см. урок 12, 00:05:30)
11. Type Converter - приобразовывает поле класса в строку для занесения в БД, если оно является объектом
12. зависимости для Retrofit, Gson и RxJava - вбиваем в гугле rxjava2 retrofit2 android

Из нового:
1. Создание меню в углу приложения
2. Передача ACTION_VIEW и url фильма в intent, для перехода в приложение прогирывающее видео по переданному URL
3. contentDescription в XML - описание конкретного View, для чего оно нужно. Если включить специальные возможности, то при нажатии на View, будет озвучено, что это такое
4. Тэг View в XML может служить полосой
5. TypeConverters 00:11:00 доп информация по пользованию Retrofit2